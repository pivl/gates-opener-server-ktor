import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.plugins.contentnegotiation.*
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock
import kotlinx.serialization.json.Json

class TokenService(
    private val httpClient: HttpClient,
    private val initialToken: String,
    private val deviceUuid: String = "fe9883696cbc9018"
) {
    private val mutex = Mutex()
    private var authToken: String = initialToken
    private var mainToken: String? = null
    private var intercomToken: String? = null

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ refresh
    suspend fun refreshAuthToken(): Boolean = mutex.withLock {
        return try {
            println("üîÑ TokenService: Refreshing auth token...")
            println("üîó TokenService: Making request to https://id.evo73.ru/auth/refresh")
            val response = httpClient.post("https://id.evo73.ru/auth/refresh") {
                headers {
                    append("X-Device-UUID", deviceUuid)
                    append("Authorization", "Bearer $authToken")
                    append("Accept", "application/json, text/plain, */*")
                    append("Content-Type", "application/json")
                }
                setBody("{}")
            }

            if (response.status == HttpStatusCode.OK) {
                val refreshResponse = response.body<RefreshTokenResponseDto>()
                authToken = refreshResponse.data.token
                // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è auth —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã
                mainToken = null
                intercomToken = null
                println("‚úÖ TokenService: Auth token refreshed successfully")
                true
            } else {
                println("‚ùå TokenService: Failed to refresh auth token: ${response.status}")
                println("üìÑ TokenService: Response body: ${response.bodyAsText()}")
                false
            }
        } catch (e: Exception) {
            println("‚ùå TokenService: Error refreshing auth token: ${e.message}")
            e.printStackTrace()
            false
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ main —Ç–æ–∫–µ–Ω–∞
    suspend fun getMainToken(): String? = mutex.withLock {
        if (mainToken != null) {
            println("üîÑ TokenService: Using cached main token")
            return mainToken
        }

        return try {
            println("üîÑ TokenService: Getting main token...")
            println("üîó TokenService: Making request to https://api.app.evo73.ru/api/v2/single-auth/main-token")
            val response = httpClient.post("https://api.app.evo73.ru/api/v2/single-auth/main-token") {
                headers {
                    append("X-Device-UUID", deviceUuid)
                    append("Accept", "application/json, text/plain, */*")
                    append("Content-Type", "application/json")
                }
                setBody(TokenRequestDto(authToken))
            }

            if (response.status == HttpStatusCode.OK) {
                val tokenResponse = response.body<SingleAuthTokenDto>()
                mainToken = tokenResponse.token
                println("‚úÖ TokenService: Main token obtained successfully")
                mainToken
            } else {
                println("‚ùå TokenService: Failed to get main token: ${response.status}")
                println("üìÑ TokenService: Response body: ${response.bodyAsText()}")
                null
            }
        } catch (e: Exception) {
            println("‚ùå TokenService: Error getting main token: ${e.message}")
            e.printStackTrace()
            null
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ intercom —Ç–æ–∫–µ–Ω–∞
    suspend fun getIntercomToken(): String? {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        mutex.withLock {
            if (intercomToken != null) {
                println("üîÑ TokenService: Using cached intercom token")
                return intercomToken
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º main token –≤–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–¥–ª–æ–∫–∞
        val currentMainToken = mutex.withLock { mainToken } ?: getMainToken()
        if (currentMainToken == null) {
            println("‚ùå TokenService: Cannot get intercom token: main token is null")
            return null
        }

        return try {
            println("üîÑ TokenService: Getting intercom token...")
            println("üîó TokenService: Making request to https://api.app.evo73.ru/api/v1/authIntercom")
            val response = httpClient.post("https://api.app.evo73.ru/api/v1/authIntercom") {
                headers {
                    append("X-Device-UUID", deviceUuid)
                    append("Authorization", "Bearer $currentMainToken")
                    append("Accept", "application/json, text/plain, */*")
                    append("Content-Type", "application/json")
                }
                setBody("{}")
            }

            if (response.status == HttpStatusCode.OK) {
                val tokenResponse = response.body<IntercomTokenDto>()
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                mutex.withLock {
                    intercomToken = tokenResponse.token
                }
                println("‚úÖ TokenService: Intercom token obtained successfully")
                tokenResponse.token
            } else {
                println("‚ùå TokenService: Failed to get intercom token: ${response.status}")
                println("üìÑ TokenService: Response body: ${response.bodyAsText()}")
                null
            }
        } catch (e: Exception) {
            println("‚ùå TokenService: Error getting intercom token: ${e.message}")
            e.printStackTrace()
            null
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 401
    suspend fun getValidIntercomToken(): String? {
        println("üîÑ TokenService: Getting valid intercom token...")
        var token = getIntercomToken()
        if (token == null) {
            println("‚ö†Ô∏è TokenService: Intercom token is null, trying to refresh auth token...")
            // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å auth —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            if (refreshAuthToken()) {
                println("üîÑ TokenService: Auth token refreshed, getting new intercom token...")
                token = getIntercomToken()
            } else {
                println("‚ùå TokenService: Failed to refresh auth token")
            }
        }
        println("üéØ TokenService: Returning intercom token: ${if (token != null) "‚úÖ Valid" else "‚ùå Null"}")
        return token
    }

    suspend fun close() {
        httpClient.close()
    }
}